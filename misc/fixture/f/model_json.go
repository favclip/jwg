// generated by jwg -type SampleF -output misc/fixture/f/model_json.go misc/fixture/f; DO NOT EDIT

package f

import (
	"encoding/json"

	"github.com/favclip/jwg/misc/fixture/a"
	bravo "github.com/favclip/jwg/misc/fixture/b"
)

// SampleFJSON is jsonized struct for SampleF.
type SampleFJSON struct {
	A *a.Sample     `json:"a,omitempty"`
	B *bravo.Sample `json:"b,omitempty"`
}

// SampleFJSONList is synonym about []*SampleFJSON.
type SampleFJSONList []*SampleFJSON

// SampleFPropertyEncoder is property encoder for [1]sJSON.
type SampleFPropertyEncoder func(src *SampleF, dest *SampleFJSON) error

// SampleFPropertyDecoder is property decoder for [1]sJSON.
type SampleFPropertyDecoder func(src *SampleFJSON, dest *SampleF) error

// SampleFPropertyInfo stores property information.
type SampleFPropertyInfo struct {
	name    string
	Encoder SampleFPropertyEncoder
	Decoder SampleFPropertyDecoder
}

// SampleFJSONBuilder convert between SampleF to SampleFJSON mutually.
type SampleFJSONBuilder struct {
	_properties map[string]*SampleFPropertyInfo
	A           *SampleFPropertyInfo
	B           *SampleFPropertyInfo
}

// NewSampleFJSONBuilder make new SampleFJSONBuilder.
func NewSampleFJSONBuilder() *SampleFJSONBuilder {
	return &SampleFJSONBuilder{
		_properties: map[string]*SampleFPropertyInfo{},
		A: &SampleFPropertyInfo{
			name: "A",
			Encoder: func(src *SampleF, dest *SampleFJSON) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
			Decoder: func(src *SampleFJSON, dest *SampleF) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
		},
		B: &SampleFPropertyInfo{
			name: "B",
			Encoder: func(src *SampleF, dest *SampleFJSON) error {
				if src == nil {
					return nil
				}
				dest.B = src.B
				return nil
			},
			Decoder: func(src *SampleFJSON, dest *SampleF) error {
				if src == nil {
					return nil
				}
				dest.B = src.B
				return nil
			},
		},
	}
}

// AddAll adds all property to SampleFJSONBuilder.
func (b *SampleFJSONBuilder) AddAll() *SampleFJSONBuilder {
	b._properties["A"] = b.A
	b._properties["B"] = b.B
	return b
}

// Add specified property to SampleFJSONBuilder.
func (b *SampleFJSONBuilder) Add(info *SampleFPropertyInfo) *SampleFJSONBuilder {
	b._properties[info.name] = info
	return b
}

// Remove specified property to SampleFJSONBuilder.
func (b *SampleFJSONBuilder) Remove(info *SampleFPropertyInfo) *SampleFJSONBuilder {
	delete(b._properties, info.name)
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *SampleFJSONBuilder) Convert(orig *SampleF) (*SampleFJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &SampleFJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *SampleFJSONBuilder) ConvertList(orig []*SampleF) (SampleFJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(SampleFJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *SampleFJSON) Convert() (*SampleF, error) {
	ret := &SampleF{}

	b := NewSampleFJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList SampleFJSONList) Convert() ([]*SampleF, error) {
	orig := ([]*SampleFJSON)(jsonList)

	list := make([]*SampleF, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *SampleFJSONBuilder) Marshal(orig *SampleF) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}
