// generated by jwg -type Sample -output misc/fixture/b/model_json.go misc/fixture/b; DO NOT EDIT

package b

import (
	"encoding/json"
)

// SampleJSON is jsonized struct for Sample.
type SampleJSON struct {
	A string  `json:"foo!,omitempty"`
	B string  `json:"b,omitempty"`
	C int     `json:"c,omitempty,string"`
	D int     `json:"d,omitempty,string"`
	F int64   `json:"f,omitempty,string"`
	G []int64 `json:"g,omitempty"`
}

// SampleJSONList is synonym about []*SampleJSON.
type SampleJSONList []*SampleJSON

// SamplePropertyEncoder is property encoder for [1]sJSON.
type SamplePropertyEncoder func(src *Sample, dest *SampleJSON) error

// SamplePropertyDecoder is property decoder for [1]sJSON.
type SamplePropertyDecoder func(src *SampleJSON, dest *Sample) error

// SamplePropertyInfo stores property information.
type SamplePropertyInfo struct {
	fieldName string
	jsonName  string
	Encoder   SamplePropertyEncoder
	Decoder   SamplePropertyDecoder
}

// FieldName returns struct field name of property.
func (info *SamplePropertyInfo) FieldName() string {
	return info.fieldName
}

// JSONName returns json field name of property.
func (info *SamplePropertyInfo) JSONName() string {
	return info.jsonName
}

// SampleJSONBuilder convert between Sample to SampleJSON mutually.
type SampleJSONBuilder struct {
	_properties        map[string]*SamplePropertyInfo
	_jsonPropertyMap   map[string]*SamplePropertyInfo
	_structPropertyMap map[string]*SamplePropertyInfo
	A                  *SamplePropertyInfo
	B                  *SamplePropertyInfo
	C                  *SamplePropertyInfo
	D                  *SamplePropertyInfo
	F                  *SamplePropertyInfo
	G                  *SamplePropertyInfo
}

// NewSampleJSONBuilder make new SampleJSONBuilder.
func NewSampleJSONBuilder() *SampleJSONBuilder {
	jb := &SampleJSONBuilder{
		_properties:        map[string]*SamplePropertyInfo{},
		_jsonPropertyMap:   map[string]*SamplePropertyInfo{},
		_structPropertyMap: map[string]*SamplePropertyInfo{},
		A: &SamplePropertyInfo{
			fieldName: "A",
			jsonName:  "foo!",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
		},
		B: &SamplePropertyInfo{
			fieldName: "B",
			jsonName:  "b",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.B = src.B
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.B = src.B
				return nil
			},
		},
		C: &SamplePropertyInfo{
			fieldName: "C",
			jsonName:  "c",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.C = src.C
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.C = src.C
				return nil
			},
		},
		D: &SamplePropertyInfo{
			fieldName: "D",
			jsonName:  "d",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.D = src.D
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.D = src.D
				return nil
			},
		},
		F: &SamplePropertyInfo{
			fieldName: "F",
			jsonName:  "f",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.F = src.F
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.F = src.F
				return nil
			},
		},
		G: &SamplePropertyInfo{
			fieldName: "G",
			jsonName:  "g",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				dest.G = src.G
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				dest.G = src.G
				return nil
			},
		},
	}
	jb._structPropertyMap["A"] = jb.A
	jb._jsonPropertyMap["foo!"] = jb.A
	jb._structPropertyMap["B"] = jb.B
	jb._jsonPropertyMap["b"] = jb.B
	jb._structPropertyMap["C"] = jb.C
	jb._jsonPropertyMap["c"] = jb.C
	jb._structPropertyMap["D"] = jb.D
	jb._jsonPropertyMap["d"] = jb.D
	jb._structPropertyMap["F"] = jb.F
	jb._jsonPropertyMap["f"] = jb.F
	jb._structPropertyMap["G"] = jb.G
	jb._jsonPropertyMap["g"] = jb.G
	return jb
}

// Properties returns all properties on SampleJSONBuilder.
func (b *SampleJSONBuilder) Properties() []*SamplePropertyInfo {
	return []*SamplePropertyInfo{
		b.A,
		b.B,
		b.C,
		b.D,
		b.F,
		b.G,
	}
}

// AddAll adds all property to SampleJSONBuilder.
func (b *SampleJSONBuilder) AddAll() *SampleJSONBuilder {
	b._properties["A"] = b.A
	b._properties["B"] = b.B
	b._properties["C"] = b.C
	b._properties["D"] = b.D
	b._properties["F"] = b.F
	b._properties["G"] = b.G
	return b
}

// Add specified property to SampleJSONBuilder.
func (b *SampleJSONBuilder) Add(info *SamplePropertyInfo) *SampleJSONBuilder {
	b._properties[info.fieldName] = info
	return b
}

// AddByJSONNames add properties to SampleJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) AddByJSONNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// AddByNames add properties to SampleJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) AddByNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// Remove specified property to SampleJSONBuilder.
func (b *SampleJSONBuilder) Remove(info *SamplePropertyInfo) *SampleJSONBuilder {
	delete(b._properties, info.fieldName)
	return b
}

// RemoveByJSONNames remove properties to SampleJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) RemoveByJSONNames(names ...string) *SampleJSONBuilder {

	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// RemoveByNames remove properties to SampleJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) RemoveByNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *SampleJSONBuilder) Convert(orig *Sample) (*SampleJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &SampleJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *SampleJSONBuilder) ConvertList(orig []*Sample) (SampleJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(SampleJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *SampleJSON) Convert() (*Sample, error) {
	ret := &Sample{}

	b := NewSampleJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList SampleJSONList) Convert() ([]*Sample, error) {
	orig := ([]*SampleJSON)(jsonList)

	list := make([]*Sample, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *SampleJSONBuilder) Marshal(orig *Sample) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}
