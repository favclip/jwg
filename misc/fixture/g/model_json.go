// generated by jwg -type Sample,Inner -output misc/fixture/g/model_json.go misc/fixture/g; DO NOT EDIT

package g

import (
	"encoding/json"
)

// InnerJSON is jsonized struct for Inner.
type InnerJSON struct {
	A string `json:"a,omitempty"`
}

// InnerJSONList is synonym about []*InnerJSON.
type InnerJSONList []*InnerJSON

// InnerPropertyEncoder is property encoder for [1]sJSON.
type InnerPropertyEncoder func(src *Inner, dest *InnerJSON) error

// InnerPropertyDecoder is property decoder for [1]sJSON.
type InnerPropertyDecoder func(src *InnerJSON, dest *Inner) error

// InnerPropertyInfo stores property information.
type InnerPropertyInfo struct {
	fieldName string
	jsonName  string
	Encoder   InnerPropertyEncoder
	Decoder   InnerPropertyDecoder
}

// FieldName returns struct field name of property.
func (info *InnerPropertyInfo) FieldName() string {
	return info.fieldName
}

// JSONName returns json field name of property.
func (info *InnerPropertyInfo) JSONName() string {
	return info.jsonName
}

// InnerJSONBuilder convert between Inner to InnerJSON mutually.
type InnerJSONBuilder struct {
	_properties        map[string]*InnerPropertyInfo
	_jsonPropertyMap   map[string]*InnerPropertyInfo
	_structPropertyMap map[string]*InnerPropertyInfo
	A                  *InnerPropertyInfo
}

// NewInnerJSONBuilder make new InnerJSONBuilder.
func NewInnerJSONBuilder() *InnerJSONBuilder {
	jb := &InnerJSONBuilder{
		_properties:        map[string]*InnerPropertyInfo{},
		_jsonPropertyMap:   map[string]*InnerPropertyInfo{},
		_structPropertyMap: map[string]*InnerPropertyInfo{},
		A: &InnerPropertyInfo{
			fieldName: "A",
			jsonName:  "a",
			Encoder: func(src *Inner, dest *InnerJSON) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
			Decoder: func(src *InnerJSON, dest *Inner) error {
				if src == nil {
					return nil
				}
				dest.A = src.A
				return nil
			},
		},
	}
	jb._structPropertyMap["A"] = jb.A
	jb._jsonPropertyMap["a"] = jb.A
	return jb
}

// Properties returns all properties on InnerJSONBuilder.
func (b *InnerJSONBuilder) Properties() []*InnerPropertyInfo {
	return []*InnerPropertyInfo{
		b.A,
	}
}

// AddAll adds all property to InnerJSONBuilder.
func (b *InnerJSONBuilder) AddAll() *InnerJSONBuilder {
	b._properties["A"] = b.A
	return b
}

// Add specified property to InnerJSONBuilder.
func (b *InnerJSONBuilder) Add(info *InnerPropertyInfo) *InnerJSONBuilder {
	b._properties[info.fieldName] = info
	return b
}

// AddByJSONNames add properties to InnerJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *InnerJSONBuilder) AddByJSONNames(names ...string) *InnerJSONBuilder {
	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// AddByNames add properties to InnerJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *InnerJSONBuilder) AddByNames(names ...string) *InnerJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// Remove specified property to InnerJSONBuilder.
func (b *InnerJSONBuilder) Remove(info *InnerPropertyInfo) *InnerJSONBuilder {
	delete(b._properties, info.fieldName)
	return b
}

// RemoveByJSONNames remove properties to InnerJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *InnerJSONBuilder) RemoveByJSONNames(names ...string) *InnerJSONBuilder {

	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// RemoveByNames remove properties to InnerJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *InnerJSONBuilder) RemoveByNames(names ...string) *InnerJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *InnerJSONBuilder) Convert(orig *Inner) (*InnerJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &InnerJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *InnerJSONBuilder) ConvertList(orig []*Inner) (InnerJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(InnerJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *InnerJSON) Convert() (*Inner, error) {
	ret := &Inner{}

	b := NewInnerJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList InnerJSONList) Convert() ([]*Inner, error) {
	orig := ([]*InnerJSON)(jsonList)

	list := make([]*Inner, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *InnerJSONBuilder) Marshal(orig *Inner) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}

// SampleJSON is jsonized struct for Sample.
type SampleJSON struct {
	A1  InnerJSON     `json:"a1,omitempty"`
	A2  *InnerJSON    `json:"a2,omitempty"`
	As1 []InnerJSON   `json:"as1,omitempty"`
	As2 []*InnerJSON  `json:"as2,omitempty"`
	As3 *[]InnerJSON  `json:"as3,omitempty"`
	As4 *[]*InnerJSON `json:"as4,omitempty"`
}

// SampleJSONList is synonym about []*SampleJSON.
type SampleJSONList []*SampleJSON

// SamplePropertyEncoder is property encoder for [1]sJSON.
type SamplePropertyEncoder func(src *Sample, dest *SampleJSON) error

// SamplePropertyDecoder is property decoder for [1]sJSON.
type SamplePropertyDecoder func(src *SampleJSON, dest *Sample) error

// SamplePropertyInfo stores property information.
type SamplePropertyInfo struct {
	fieldName string
	jsonName  string
	Encoder   SamplePropertyEncoder
	Decoder   SamplePropertyDecoder
}

// FieldName returns struct field name of property.
func (info *SamplePropertyInfo) FieldName() string {
	return info.fieldName
}

// JSONName returns json field name of property.
func (info *SamplePropertyInfo) JSONName() string {
	return info.jsonName
}

// SampleJSONBuilder convert between Sample to SampleJSON mutually.
type SampleJSONBuilder struct {
	_properties        map[string]*SamplePropertyInfo
	_jsonPropertyMap   map[string]*SamplePropertyInfo
	_structPropertyMap map[string]*SamplePropertyInfo
	A1                 *SamplePropertyInfo
	A2                 *SamplePropertyInfo
	As1                *SamplePropertyInfo
	As2                *SamplePropertyInfo
	As3                *SamplePropertyInfo
	As4                *SamplePropertyInfo
}

// NewSampleJSONBuilder make new SampleJSONBuilder.
func NewSampleJSONBuilder() *SampleJSONBuilder {
	jb := &SampleJSONBuilder{
		_properties:        map[string]*SamplePropertyInfo{},
		_jsonPropertyMap:   map[string]*SamplePropertyInfo{},
		_structPropertyMap: map[string]*SamplePropertyInfo{},
		A1: &SamplePropertyInfo{
			fieldName: "A1",
			jsonName:  "a1",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				d, err := NewInnerJSONBuilder().AddAll().Convert(&src.A1)
				if err != nil {
					return err
				}
				dest.A1 = *d
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				d, err := src.A1.Convert()
				if err != nil {
					return err
				}
				dest.A1 = *d
				return nil
			},
		},
		A2: &SamplePropertyInfo{
			fieldName: "A2",
			jsonName:  "a2",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				} else if src.A2 == nil {
					return nil
				}
				d, err := NewInnerJSONBuilder().AddAll().Convert(src.A2)
				if err != nil {
					return err
				}
				dest.A2 = d
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				} else if src.A2 == nil {
					return nil
				}
				d, err := src.A2.Convert()
				if err != nil {
					return err
				}
				dest.A2 = d
				return nil
			},
		},
		As1: &SamplePropertyInfo{
			fieldName: "As1",
			jsonName:  "as1",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				b := NewInnerJSONBuilder().AddAll()
				list := make([]InnerJSON, len(src.As1))
				for idx, obj := range src.As1 {
					d, err := b.Convert(&obj)
					if err != nil {
						return err
					}
					list[idx] = *d
				}
				dest.As1 = list
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				list := make([]Inner, len(src.As1))
				for idx, obj := range src.As1 {
					d, err := obj.Convert()
					if err != nil {
						return err
					}
					list[idx] = *d
				}
				dest.As1 = list
				return nil
			},
		},
		As2: &SamplePropertyInfo{
			fieldName: "As2",
			jsonName:  "as2",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				}
				list, err := NewInnerJSONBuilder().AddAll().ConvertList(src.As2)
				if err != nil {
					return err
				}
				dest.As2 = ([]*InnerJSON)(list)
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				}
				list := make([]*Inner, len(src.As2))
				for idx, obj := range src.As2 {
					if obj == nil {
						continue
					}
					d, err := obj.Convert()
					if err != nil {
						return err
					}
					list[idx] = d
				}
				dest.As2 = list
				return nil
			},
		},
		As3: &SamplePropertyInfo{
			fieldName: "As3",
			jsonName:  "as3",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				} else if src.As3 == nil {
					return nil
				}
				b := NewInnerJSONBuilder().AddAll()
				list := make([]InnerJSON, len(*src.As3))
				for idx, obj := range *src.As3 {
					d, err := b.Convert(&obj)
					if err != nil {
						return err
					}
					list[idx] = *d
				}
				dest.As3 = &list
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				} else if src.As3 == nil {
					return nil
				}
				list := make([]Inner, len(*src.As3))
				for idx, obj := range *src.As3 {
					d, err := obj.Convert()
					if err != nil {
						return err
					}
					list[idx] = *d
				}
				dest.As3 = &list
				return nil
			},
		},
		As4: &SamplePropertyInfo{
			fieldName: "As4",
			jsonName:  "as4",
			Encoder: func(src *Sample, dest *SampleJSON) error {
				if src == nil {
					return nil
				} else if src.As4 == nil {
					return nil
				}
				list, err := NewInnerJSONBuilder().AddAll().ConvertList(*src.As4)
				if err != nil {
					return err
				}
				dest.As4 = (*[]*InnerJSON)(&list)
				return nil
			},
			Decoder: func(src *SampleJSON, dest *Sample) error {
				if src == nil {
					return nil
				} else if src.As4 == nil {
					return nil
				}
				list := make([]*Inner, len(*src.As4))
				for idx, obj := range *src.As4 {
					if obj == nil {
						continue
					}
					d, err := obj.Convert()
					if err != nil {
						return err
					}
					list[idx] = d
				}
				dest.As4 = &list
				return nil
			},
		},
	}
	jb._structPropertyMap["A1"] = jb.A1
	jb._jsonPropertyMap["a1"] = jb.A1
	jb._structPropertyMap["A2"] = jb.A2
	jb._jsonPropertyMap["a2"] = jb.A2
	jb._structPropertyMap["As1"] = jb.As1
	jb._jsonPropertyMap["as1"] = jb.As1
	jb._structPropertyMap["As2"] = jb.As2
	jb._jsonPropertyMap["as2"] = jb.As2
	jb._structPropertyMap["As3"] = jb.As3
	jb._jsonPropertyMap["as3"] = jb.As3
	jb._structPropertyMap["As4"] = jb.As4
	jb._jsonPropertyMap["as4"] = jb.As4
	return jb
}

// Properties returns all properties on SampleJSONBuilder.
func (b *SampleJSONBuilder) Properties() []*SamplePropertyInfo {
	return []*SamplePropertyInfo{
		b.A1,
		b.A2,
		b.As1,
		b.As2,
		b.As3,
		b.As4,
	}
}

// AddAll adds all property to SampleJSONBuilder.
func (b *SampleJSONBuilder) AddAll() *SampleJSONBuilder {
	b._properties["A1"] = b.A1
	b._properties["A2"] = b.A2
	b._properties["As1"] = b.As1
	b._properties["As2"] = b.As2
	b._properties["As3"] = b.As3
	b._properties["As4"] = b.As4
	return b
}

// Add specified property to SampleJSONBuilder.
func (b *SampleJSONBuilder) Add(info *SamplePropertyInfo) *SampleJSONBuilder {
	b._properties[info.fieldName] = info
	return b
}

// AddByJSONNames add properties to SampleJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) AddByJSONNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// AddByNames add properties to SampleJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) AddByNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// Remove specified property to SampleJSONBuilder.
func (b *SampleJSONBuilder) Remove(info *SamplePropertyInfo) *SampleJSONBuilder {
	delete(b._properties, info.fieldName)
	return b
}

// RemoveByJSONNames remove properties to SampleJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) RemoveByJSONNames(names ...string) *SampleJSONBuilder {

	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// RemoveByNames remove properties to SampleJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *SampleJSONBuilder) RemoveByNames(names ...string) *SampleJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *SampleJSONBuilder) Convert(orig *Sample) (*SampleJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &SampleJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *SampleJSONBuilder) ConvertList(orig []*Sample) (SampleJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(SampleJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *SampleJSON) Convert() (*Sample, error) {
	ret := &Sample{}

	b := NewSampleJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList SampleJSONList) Convert() ([]*Sample, error) {
	orig := ([]*SampleJSON)(jsonList)

	list := make([]*Sample, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *SampleJSONBuilder) Marshal(orig *Sample) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}
